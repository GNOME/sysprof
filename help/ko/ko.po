# Korean translation for sysprof.
# Copyright (C) 2023 sysprof's COPYRIGHT HOLDER
# This file is distributed under the same license as the sysprof package.
# Seong-ho Cho <shcho@gnome.org>, 2023.
#
msgid ""
msgstr ""
"Project-Id-Version: sysprof master\n"
"POT-Creation-Date: 2023-09-12 22:38+0000\n"
"PO-Revision-Date: 2023-09-13 13:42+0900\n"
"Last-Translator: Seong-ho Cho <shcho@gnome.org>\n"
"Language-Team: Korean <gnome-kr@googlegroups.com>\n"
"Language: ko\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Poedit 3.3.2\n"

#. Put one translator per line, in the form NAME <EMAIL>, YEAR1, YEAR2
msgctxt "_"
msgid "translator-credits"
msgstr "조성호 <shcho@gnome.org> , 2023."

#. (itstool) path: info/title
#: C/index.page:7
msgctxt "link:trail"
msgid "Sysprof"
msgstr "시스프롭"

#. (itstool) path: info/title
#: C/index.page:8
msgctxt "link"
msgid "Sysprof"
msgstr "시스프롭"

#. (itstool) path: info/title
#: C/index.page:9
msgctxt "text"
msgid "Sysprof"
msgstr "시스프롭"

#. (itstool) path: page/title
#: C/index.page:15
msgid "<_:media-1/> Sysprof"
msgstr "<_:media-1/> 시스프롭"

#. (itstool) path: section/title
#. (itstool) path: page/title
#: C/index.page:21 C/profiling.page:8
msgid "Profiling"
msgstr "프로파일링"

#. (itstool) path: section/title
#: C/index.page:25
msgid "Frequently Asked Questions"
msgstr "자주 묻는 질문"

#. (itstool) path: credit/name
#: C/introduction.page:15
msgid "Christian Hergert"
msgstr "Christian Hergert"

#. (itstool) path: credit/years
#: C/introduction.page:17
msgid "2016"
msgstr "2016"

#. (itstool) path: info/desc
#: C/introduction.page:22
msgid "Welcome to <app>Sysprof</app>!"
msgstr "<app>시스프롭</app> 사용을 환영합니다!"

#. (itstool) path: page/title
#: C/introduction.page:25
msgid "Introduction"
msgstr "소개"

#. (itstool) path: page/p
#: C/introduction.page:27
msgid ""
"<app>Sysprof</app> is a system profiler for Linux that targets the GNOME "
"desktop."
msgstr ""
"<app>시스프롭</app>은 그놈 데스크톱 대상 리눅스용 시스템 프로파일링 앱입니다."

#. (itstool) path: info/desc
#: C/introduction.page:33
msgid "Differences between tracing and sampling"
msgstr "추적과 샘플링의 차이"

#. (itstool) path: section/title
#: C/introduction.page:35
msgid "What is a Profiler?"
msgstr "프로파일러가 무엇인가요?"

#. (itstool) path: section/p
#: C/introduction.page:37
msgid ""
"A profiler is an application that records information about an application "
"or system while it runs. That information can be explored to gain insight "
"into how the application could be changed to perform better."
msgstr ""
"프로파일러는 앱이나 시스템의 실행 도중 정보를 기록하는 앱입니다. 앱을 어떻게 "
"하면 잘 동작하게 할 지 통찰력을 얻게끔 이 정보를 탐색할 수 있습니다."

#. (itstool) path: section/p
#: C/introduction.page:42
msgid ""
"Two common categories of software profilers exist, commonly referred to as "
"either tracing or sampling profilers. What is meant by tracing profiler is "
"that every function call executed by the program is known to the profiler. A "
"sampling profiler works by inspecting the state of the program on a regular "
"frequency and therefore does not see every function call executed by the "
"program."
msgstr ""
"기존의 프로그램 프로파일러는 두 부류로 나누는데, 일반적으로 추적 프로파일러"
"나 샘플링 프로파일러로 이야기합니다. 추적 프로파일러에서는 프로그램에서 실행"
"한 모든 함수 호출을 알아냅니다. 샘플링 프로파일러에서는 주기적 프로그램 상태"
"를 확인하므로 프로그램에서 실행한 모든 함수 호출을 확인하지 않습니다."

#. (itstool) path: section/p
#: C/introduction.page:49
msgid ""
"Both tracing and sampling profilers have their advantages. A notable "
"advantage of a sampling profiler is that the overhead is much less than that "
"of a tracing profiler, making it easier to use for software that requires "
"interactivity."
msgstr ""
"추적 프로파일러와 샘플링 프로파일러는 각기 나름의 장점이 있습니다. 샘플링 프"
"로파일러의 주목할만한 장점은 추적 프로파일러보다 부하가 적어, 상호작용이 필요"
"한 프로그램을 쉽게 사용할 수 있게 해줍니다."

#. (itstool) path: section/p
#: C/introduction.page:54
msgid "<app>Sysprof</app> is a sampling profiler."
msgstr "<app>시스프롭</app>은 샘플링 프로파일러입니다."

#. (itstool) path: section/title
#: C/profiling.page:10
msgid "How to profile your system"
msgstr "시스템 프로파일링 방법"

#. (itstool) path: section/p
#: C/profiling.page:11
msgid ""
"When <app>Sysprof</app> profiles your system, it records stack information "
"for all applications executing, including the Linux kernel. This can "
"sometimes be confusing if you only want to look at a single process. If your "
"application does not interact much with the host system, you may have more "
"success by using <app>Sysprof</app> to <link href=\"profiling#new-process-"
"profiling\">spawn a new process</link>."
msgstr ""
"<app>시스프롭</app>에서 시스템을 프로파일링할 때는 커널 및 모든 프로그램의 실"
"행 스택 정보를 기록합니다. 단일 프로세스만을 보려 할 경우 혼동을 줄 수 있습니"
"다. 앱이 호스트 시스템과 충분한 상호 작용을 거치지 않는다면 <app>시스프롭</"
"app>에서 <link href=\"profiling#new-process-profiling\">새 프로세스를 실행</"
"link>하여 더 원하는 정보를 볼 수 있습니다."

#. (itstool) path: section/p
#: C/profiling.page:18
msgid ""
"To profile your entire system, ensure the target button is set to <em>All "
"Processes</em> and click <em>Record</em>."
msgstr ""
"전체 시스템을 프로파일링 하려면, 대상 단추를 <em>모든 프로세스</em>로 설정한 "
"후 <em>기록</em>을 누릅니다."

#. (itstool) path: section/p
#: C/profiling.page:21
msgid ""
"At this point, you may be asked to <em>authorize</em> access to profile the "
"system. This is required as the Linux kernel's perf implementation requires "
"root to perform whole-system profiling."
msgstr ""
"여기서,  시스템을 프로파일링할 때 접근 <em>승인 확인</em>을 받습니다. 리눅스 "
"커널의 perf 구현체에서 전체 시스템 프로파일링을 수행할 때 루트 권한이 필요하"
"기에 필요한 과정입니다."

#. (itstool) path: section/p
#: C/profiling.page:25
msgid ""
"During the profiling session, you will see the number of seconds the profile "
"has been active. Clicking the <em>Record</em> button again will stop the "
"profiling session. Afterwhich, the callgraph will be displayed."
msgstr ""
"프로파일링 세션을 진행하는 동안, 몇초간 프로파일 활성 상태를 보게됩니다. <em>"
"기록</em> 단추를 다시 누르면 프로파일링 세션을 멈춥니다. 이 동작이 끝나면, 호"
"출 그래프를 보여줍니다."

#. (itstool) path: note/p
#: C/profiling.page:31
msgid ""
"If you find that the <app>sysprof</app> application is showing up in your "
"profiling callgraph, you might consider recording the profiling session with "
"<cmd>sysprof-cli</cmd>. This is a command line program that will capture "
"your profiling session to disk to be viewed at a later time."
msgstr ""
"<app>시스프롭</app> 앱에서 프로파일링 호출 그래프를 보여주고 나면, "
"<cmd>sysprof-cli</cmd>로 프로파일링 세션 기록을 생각해볼 수 있습니다. 이 명령"
"행 프로그램은 나중에 볼 프로파일링 세션을 캡쳐하여 디스크에 저장합니다."

#. (itstool) path: section/p
#: C/profiling.page:37
msgid ""
"See <link href=\"profiling#interpreting-results\">interpreting results</"
"link> for more guidance."
msgstr ""
"자세한 안내는 <link href=\"profiling#interpreting-results\">결과 해석</link> "
"편을 살펴봅니다."

#. (itstool) path: section/title
#: C/profiling.page:46
msgid "Profile a new process"
msgstr "새 프로세스 프로파일링"

#. (itstool) path: section/p
#: C/profiling.page:48
msgid ""
"Often times, you may need to spawn a new process to profile. First, select "
"the <em>Application</em> button next at the top of the recording window. "
"Fill in your command and working directory, and optionally specify any "
"environment variables you need. Your process will be started when recording "
"begins."
msgstr ""
"종종 프로파일링할 새 프로세스를 실행해야 할 경우가 생깁니다. 기록 창의 상단 "
"측면에 <em>앱</em> 단추를 선택합니다. 명령과 작업 디렉터리 내용을 채워넣고, "
"추가로 필요한 환경변수도 넣습니다. 기록을 시작할 때 프로세스 실행을 시작합니"
"다."

#. (itstool) path: note/p
#: C/profiling.page:55
msgid ""
"If you are spawning a process that requires access to your current display, "
"such as a GTK+ application, you will want to make sure <em>Inherit current "
"environment</em> is set."
msgstr ""
"GTK+ 앱과 같은 현재 화면에 접근해야 할 프로세스를 실행한다면, <em>현재 환경 "
"정보 전달</em>을 설정했는지 확인하는게 좋습니다."

#. (itstool) path: section/title
#: C/profiling.page:66
msgid "Profiling with the sysprof-cli command line tool"
msgstr "sysprof-cli 명령행 도구로 프로파일링하기"

#. (itstool) path: section/p
#: C/profiling.page:68
msgid ""
"For minimal overhead, you might consider using the <cmd>sysprof-cli</cmd> "
"command line tool. When run without any arguments, it will record your "
"entire system and save the output to <file>capture.syscap</file>. This file "
"can be opened with the <app>Sysprof</app> application to view the callgraph."
msgstr ""
"부하를 최소화하려는 목적으로 <cmd>sysprof-cli</cmd> 명령행 도구를 사용할 수 "
"있습니다. 어떤 인자 값 없이 실행하면, 전체 시스템을 기록하고 <file>capture."
"syscap</file> 파일에 출력 내용을 저장합니다. 이 파일을 <app>시스프롭</app>앱"
"에서 열고 호출 그래프를 볼 수 있습니다."

#. (itstool) path: section/p
#: C/profiling.page:73
msgid ""
"If you would like to spawn a new process, use <cmd>sysprof-cli -- 'command'</"
"cmd> to specify a command to be launched. The command will inherit the "
"current environment."
msgstr ""
"새 프로세스를 실행하려면 <cmd>sysprof-cli -- 'command'</cmd> 명령을 활용하"
"고, 실행할 명령을 command 대신 지정합니다. 지정 명령은 현재 환경 정보를 전달"
"받습니다."

#. (itstool) path: section/title
#: C/profiling.page:83
msgid "Interpreting results"
msgstr "결과 해석"

#. (itstool) path: section/p
#: C/profiling.page:85
msgid ""
"The profiling results in <app>Sysprof</app> are split into three sections. "
"On the top left is a list of all the functions profiled. They are sorted by "
"how often they were called during the recording."
msgstr ""
"<app>시스프롭</app>의 프로파일링 결과는 세가지 섹션으로 나눕니다. 좌측 상단에"
"는 프로파일링한 모든 함수의 목록입니다. 기록하는 동안 얼마나 자주 호출했는지"
"에 따라 정렬하여 보여줍니다."

#. (itstool) path: note/p
#: C/profiling.page:90
msgid ""
"It is important to note that the amount of time spent in each function is "
"not captured. That would require a tracing profiler to accurately record. "
"The percentage is calculated by determining how often that function showed "
"up in the current stacktrace when a sample was recorded."
msgstr ""
"각 함수가 얼마나 많은 시간을 소요했는지 캡처하지 않은게 중요합니다. 추적 프로"
"파일러에서는 실제로 기록해야 하는 정보입니다. 백분율은 샘플을 기록했을 때 현"
"재 스택추적 영역에서 보여주는 함수가 얼마나 자주 나타났는지 헤아려 계산합니"
"다."

#. (itstool) path: section/p
#: C/profiling.page:96
msgid ""
"After selecting a function from the functions list, all of the recorded "
"callers of that function will be displayed on the bottom left. They are also "
"sorted by the percentage of samples that included that function in the "
"stacktrace."
msgstr ""
"함수 목록에서 함수를 선별한 후에는, 기록한 모든 함수 호출자를 하단 좌측에 보"
"여줍니다. 스택추적 영역에서 해당 함수라 들어간 샘플의 백분율에 따라 정렬합니"
"다."

#. (itstool) path: section/p
#: C/profiling.page:101
msgid ""
"On the right, are all of the decendants of a selected function. You can "
"select a function either from the functions list, or the callers list."
msgstr ""
"우측에는 선택한 함수의 모든 하위 요소를 보여줍니다. 함수 목록 또는 함수 호출"
"자 목록에서 함수를 선택할 수 있습니다."

#. (itstool) path: note/p
#: C/profiling.page:105
msgid ""
"If you see <em>- - Context Switch - -</em> in your results, that means that "
"the application transitioned into or from the Linux kernel. There can be "
"many reasons for this such as a <em>syscall</em> or <em>signal</em>."
msgstr ""
"결과에 <em>- - 컨텍스트 스위치 - -</em>가 나타났다면, 해당 시점에 리눅스 커널"
"에서 실행 앱을 전환했다는 의미입니다. <em>syscall</em> 또는 <em>signal</em>"
"과 같은 요인이 이러한 현상을 야기할 수 있습니다."

#. (itstool) path: page/title
#: C/faq.page:9
msgid "What does heap mean?"
msgstr "힙은 무엇인가요?"

#. (itstool) path: section/title
#: C/faq.page:12
msgid "What does \"In file [heap]\" mean?"
msgstr "\"파일 [힙] 내부\"는 무엇인가요?"

#. (itstool) path: section/p
#: C/faq.page:14
msgid ""
"This means that sysprof believes a function was called from somewhere in the "
"program's heap (where <code>malloc</code> allocates memory) rather than the "
"code section (where executable code normally lives.) There are several "
"possible explanations."
msgstr ""
"시스프롭에서는 함수를 코드 섹션(실행 코드가 들어간 영역)이 아닌 프로그램의 힙"
"(<code>malloc</code>으로 할당한 메모리 위치) 어딘가에서 호출한다고 간주합니"
"다. 몇가지 가능한 설명은 다음과 같습니다."

#. (itstool) path: section/title
#: C/faq.page:22
msgid "JIT (Just in Time) compilers"
msgstr "JIT (Just in Time) 컴파일러"

#. (itstool) path: section/p
#: C/faq.page:24
msgid ""
"Languages like Java can generate executable code while a program is running "
"and store it in the heap. Sysprof is accurately reporting the situation in "
"this case."
msgstr ""
"Java 같은 프로그래밍 언어는 프로그램을 실행하는 동안 실행 코드를 생성하고 힙"
"에 저장할 수 있습니다. 시스프롭에서는 이 경우의 상황을 실제로 보고서로 작성합"
"니다."

#. (itstool) path: section/title
#: C/faq.page:30
msgid "Optimizing compilers"
msgstr "컴파일러 최적화"

#. (itstool) path: section/p
#: C/faq.page:32
msgid ""
"C and C++ compilers can optimize away information needed to determine a "
"function's caller, so it is mistaken for [heap]. You can still tell how "
"often each function is called by the program, but not always from where."
msgstr ""
"C 와 C++ 컴파일러는 함수 호출자를 결정하는데 필요한 정보를 최적화할 수 있어 "
"[힙]으로 오해할 수 있습니다. 프로그램에서 호출한 각 함수를 얼마나 자주 호출하"
"는지 확인 요청할 수 있지만 항상 그런 것은 아닙니다."

#. (itstool) path: note/p
#: C/faq.page:38
msgid ""
"For gcc, the flag <code>-fno-omit-frame-pointer</code> will prevent this "
"optimization. The flag is not always needed, for example on x86_64 machines "
"it is only needed with -O3 optimization."
msgstr ""
"GCC에서는 <code>-fno-omit-frame-pointer</code> 플래그로 최적화를 막습니다. "
"이 플래그가 항상 필요한건 아니지만, x86_64 머신의 경우 -O3 최적화 플래그를 사"
"용할 경우에만 필요합니다."

#. (itstool) path: note/p
#: C/faq.page:44
msgid ""
"To get the most detailed and accurate call tree from un-optimized code, use "
"these flags: <code>-ggdb -fno-omit-frame-pointer -O0</code>"
msgstr ""
"최적화하지 않은 코드에서 더 자세하고 정확한 호출 트리 정보를 가져오려면 "
"<code>-ggdb -fno-omit-frame-pointer -O0</code> 플래그를 사용합니다."

#. (itstool) path: p/link
#: C/legal.xml:5
msgid "Creative Commons Attribution-ShareAlike 4.0 International"
msgstr "크리에이티브 커먼즈 저작자표시-동일조건변경허락 4.0 국제 라이선스"

#. (itstool) path: license/p
#: C/legal.xml:4
msgid "This work is licensed under a <_:link-1/> license."
msgstr "이 문서는 <_:link-1/>에 따른 활용을 허가합니다."

#. (itstool) path: license/p
#: C/legal.xml:8
msgid ""
"As a special exception, the copyright holders give you permission to copy, "
"modify, and distribute the example code contained in this documentation "
"under the terms of your choosing, without restriction."
msgstr ""
"특별한 예외로서, 저작권 보유자는 귀하가 선택한 조건에 따라 이 문서에 포함된 "
"예제 코드를 제한 없이 복사, 수정 및 배포할 수 있는 권한을 귀하에게 부여합니"
"다."
